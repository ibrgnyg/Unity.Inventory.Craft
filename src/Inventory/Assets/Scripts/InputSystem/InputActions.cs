//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player_Controller"",
            ""id"": ""af6648b0-af01-4f2e-93ba-8a21661ef097"",
            ""actions"": [
                {
                    ""name"": ""MovementV2"",
                    ""type"": ""Button"",
                    ""id"": ""8abf1c78-c4ba-426c-9b23-867d04fe8586"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5bd10c77-97a4-4a80-9b05-6591a5e9bb02"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementV2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""84ccfbfa-055e-4576-a7f3-bc70d50fe16e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementV2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e50a31b8-a51d-4ed5-a969-d983cb4f70a6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementV2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b6520a17-18d0-4794-9749-07b55bc21cc1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementV2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e4985cf8-b3a2-4a23-9bce-5348ca579916"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementV2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""57138013-f549-4c23-aa98-42db6b31d4fe"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementV2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera_Controller"",
            ""id"": ""5fcaab69-1ab7-4f73-b0f0-5163df945697"",
            ""actions"": [
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6419cbf9-3704-481f-bcdf-321ab5540352"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b9e6b216-870b-48b2-8f41-b5cbc2ce24c3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52c75f2a-55e8-4281-8fb2-3b49cf41e28f"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2222decd-a8cb-455f-a19e-7fde8255657b"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee68fc9c-4a60-4ec7-8049-902fcee1fc89"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33b5a4ce-66a8-4258-96dd-8eb2eb69fcf7"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI_Controller"",
            ""id"": ""3740b162-c948-4fd4-83e6-7d4b7a4ba3d8"",
            ""actions"": [
                {
                    ""name"": ""InventoryOpen"",
                    ""type"": ""Button"",
                    ""id"": ""f61e9fce-ff8c-4c19-b5e7-625347e9fe30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac361179-2d9c-46e1-9043-3d9d0a0a0ecc"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryOpen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Controller
        m_Player_Controller = asset.FindActionMap("Player_Controller", throwIfNotFound: true);
        m_Player_Controller_MovementV2 = m_Player_Controller.FindAction("MovementV2", throwIfNotFound: true);
        // Camera_Controller
        m_Camera_Controller = asset.FindActionMap("Camera_Controller", throwIfNotFound: true);
        m_Camera_Controller_MouseX = m_Camera_Controller.FindAction("MouseX", throwIfNotFound: true);
        m_Camera_Controller_MouseY = m_Camera_Controller.FindAction("MouseY", throwIfNotFound: true);
        // UI_Controller
        m_UI_Controller = asset.FindActionMap("UI_Controller", throwIfNotFound: true);
        m_UI_Controller_InventoryOpen = m_UI_Controller.FindAction("InventoryOpen", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Controller
    private readonly InputActionMap m_Player_Controller;
    private List<IPlayer_ControllerActions> m_Player_ControllerActionsCallbackInterfaces = new List<IPlayer_ControllerActions>();
    private readonly InputAction m_Player_Controller_MovementV2;
    public struct Player_ControllerActions
    {
        private @InputActions m_Wrapper;
        public Player_ControllerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementV2 => m_Wrapper.m_Player_Controller_MovementV2;
        public InputActionMap Get() { return m_Wrapper.m_Player_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_ControllerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_ControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_ControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_ControllerActionsCallbackInterfaces.Add(instance);
            @MovementV2.started += instance.OnMovementV2;
            @MovementV2.performed += instance.OnMovementV2;
            @MovementV2.canceled += instance.OnMovementV2;
        }

        private void UnregisterCallbacks(IPlayer_ControllerActions instance)
        {
            @MovementV2.started -= instance.OnMovementV2;
            @MovementV2.performed -= instance.OnMovementV2;
            @MovementV2.canceled -= instance.OnMovementV2;
        }

        public void RemoveCallbacks(IPlayer_ControllerActions instance)
        {
            if (m_Wrapper.m_Player_ControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_ControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_ControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_ControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_ControllerActions @Player_Controller => new Player_ControllerActions(this);

    // Camera_Controller
    private readonly InputActionMap m_Camera_Controller;
    private List<ICamera_ControllerActions> m_Camera_ControllerActionsCallbackInterfaces = new List<ICamera_ControllerActions>();
    private readonly InputAction m_Camera_Controller_MouseX;
    private readonly InputAction m_Camera_Controller_MouseY;
    public struct Camera_ControllerActions
    {
        private @InputActions m_Wrapper;
        public Camera_ControllerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseX => m_Wrapper.m_Camera_Controller_MouseX;
        public InputAction @MouseY => m_Wrapper.m_Camera_Controller_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_Camera_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Camera_ControllerActions set) { return set.Get(); }
        public void AddCallbacks(ICamera_ControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_Camera_ControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Camera_ControllerActionsCallbackInterfaces.Add(instance);
            @MouseX.started += instance.OnMouseX;
            @MouseX.performed += instance.OnMouseX;
            @MouseX.canceled += instance.OnMouseX;
            @MouseY.started += instance.OnMouseY;
            @MouseY.performed += instance.OnMouseY;
            @MouseY.canceled += instance.OnMouseY;
        }

        private void UnregisterCallbacks(ICamera_ControllerActions instance)
        {
            @MouseX.started -= instance.OnMouseX;
            @MouseX.performed -= instance.OnMouseX;
            @MouseX.canceled -= instance.OnMouseX;
            @MouseY.started -= instance.OnMouseY;
            @MouseY.performed -= instance.OnMouseY;
            @MouseY.canceled -= instance.OnMouseY;
        }

        public void RemoveCallbacks(ICamera_ControllerActions instance)
        {
            if (m_Wrapper.m_Camera_ControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICamera_ControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_Camera_ControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Camera_ControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Camera_ControllerActions @Camera_Controller => new Camera_ControllerActions(this);

    // UI_Controller
    private readonly InputActionMap m_UI_Controller;
    private List<IUI_ControllerActions> m_UI_ControllerActionsCallbackInterfaces = new List<IUI_ControllerActions>();
    private readonly InputAction m_UI_Controller_InventoryOpen;
    public struct UI_ControllerActions
    {
        private @InputActions m_Wrapper;
        public UI_ControllerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @InventoryOpen => m_Wrapper.m_UI_Controller_InventoryOpen;
        public InputActionMap Get() { return m_Wrapper.m_UI_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UI_ControllerActions set) { return set.Get(); }
        public void AddCallbacks(IUI_ControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_UI_ControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI_ControllerActionsCallbackInterfaces.Add(instance);
            @InventoryOpen.started += instance.OnInventoryOpen;
            @InventoryOpen.performed += instance.OnInventoryOpen;
            @InventoryOpen.canceled += instance.OnInventoryOpen;
        }

        private void UnregisterCallbacks(IUI_ControllerActions instance)
        {
            @InventoryOpen.started -= instance.OnInventoryOpen;
            @InventoryOpen.performed -= instance.OnInventoryOpen;
            @InventoryOpen.canceled -= instance.OnInventoryOpen;
        }

        public void RemoveCallbacks(IUI_ControllerActions instance)
        {
            if (m_Wrapper.m_UI_ControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUI_ControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_UI_ControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI_ControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UI_ControllerActions @UI_Controller => new UI_ControllerActions(this);
    public interface IPlayer_ControllerActions
    {
        void OnMovementV2(InputAction.CallbackContext context);
    }
    public interface ICamera_ControllerActions
    {
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
    public interface IUI_ControllerActions
    {
        void OnInventoryOpen(InputAction.CallbackContext context);
    }
}
